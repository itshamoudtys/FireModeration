buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'kr.entree.spigradle' version '1.4.1'
    id 'java'
    id 'jacoco'
}

apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/publish.gradle"

sourceCompatibility = 8
targetCompatibility = 8

ext {
    mcVersion = project.property("mcVersion")
}

group project.property("group")

spigot {
    name = project.property("pluginName")
    authors = [project.property("author")]
    apiVersion = project.property("apiVersion")
    load = STARTUP
    //    depends = ['']
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

archivesBaseName = project.property("pluginName")

repositories {
    mavenCentral()
    jcenter()

    spigot()
//    bungeecord()
//    paper()
//    protocolLib()
//    enginehub()

    maven {
        name = 'github'
        url = 'https://maven.pkg.github.com/Silthus'
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    compileOnly lombok()
    annotationProcessor lombok()

    compileOnly spigot(mcVersion)

    //Add dependencies here

    //Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.+'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation mockBukkit()
    testImplementation 'org.assertj:assertj-core:3.+'
    testImplementation lombok()
    testAnnotationProcessor lombok()
}

shadowJar {
    classifier = ''
//    dependencies {
//        include(dependency('co.aikar:acf-paper:0.5.0-SNAPSHOT'))
//    }
//    relocate 'co.aikar.commands', "${packageName}.acf"
//    relocate 'co.aikar.locales', "${packageName}.locales"
}

tasks.build.dependsOn(shadowJar)
tasks.publish.dependsOn(shadowJar)

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    ignoreFailures = false
}

processResources {
    project.properties.put("version", this.version)
    expand project.properties
}

defaultTasks 'build'